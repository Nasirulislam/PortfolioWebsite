






// JSXXXXXX

{/* {file && (
                <div
                    style={{
                        position: 'absolute',
                        top: `${position.y}px`,
                        left: `${position.x}px`,
                    }}
                    onMouseDown={handleMouseDown}
                >
                    <div
                        style={{
                            width: `${size.width}px`,
                            height: `${size.height}px`,
                            border: '1px solid black',
                            outline: 'none',
                            boxShadow: 'none',
                        }}
                    >
                        <div
                            className="resize-dot top-left"
                            onMouseDown={(e) => handleResize(e, 'top-left')}
                        />
                        <div
                            className="resize-dot top-right"
                            onMouseDown={(e) => handleResize(e, 'top-right')}
                        />
                        <div
                            className="resize-dot bottom-left"
                            onMouseDown={(e) => handleResize(e, 'bottom-left')}
                        />
                        <div
                            className="resize-dot bottom-right"
                            onMouseDown={(e) => handleResize(e, 'bottom-right')}
                        />

                        <video
                            src={URL.createObjectURL(file)}
                            style={{
                                width: '100%',
                                height: '100%', objectFit: 'cover', backgroundPosition: 'center'
                            }}
                            autoPlay
                            // controls
                            loop
                        />
                    </div>
                </div>
            )} */}


// VIDEO UPLOAD
const [file, setFile] = useState(null);
const fileInputRef = useRef(null);
const [position, setPosition] = useState({ x: 0, y: 0 });
const [size, setSize] = useState({ width: 300, height: 200 });
const [success, setSuccess] = useState('');
const [videos, setVideos] = useState([]);
const [windowSize, setWindowSize] = useState({
    width: window.innerWidth,
    height: window.innerHeight,
});
const videoRef = useRef(null);
useEffect(() => {
    const handleWindowResize = () => {
        setWindowSize({ width: window.innerWidth, height: window.innerHeight });
    };
    window.addEventListener('resize', handleWindowResize);
    return () => {
        window.removeEventListener('resize', handleWindowResize);
    };

}, [windowSize])


useEffect(() => {
    fetchVideos();

}, []);


// console.log(windowSize)

const fetchVideos = async () => {
    try {
        const response = await axios.get(`${url}/project/video/get`); // Replace with your actual API endpoint
        const data = response.data;
        setVideos(data);
        // console.log("VIDEO : ",data[0])
    } catch (error) {
        console.log(error);
    }
};
// console.log(position, size);
//ref click
// const handleUploadClick = () => {
//     fileInputRef.current.click();
// };
// // file Select
// const handleFileChange = (event) => {
//     const selectedFile = event.target.files[0];
//     setFile(selectedFile);

// };
// // drag drop
// const handleMouseDown = (event) => {
//     event.preventDefault();
//     const startX = event.clientX - position.x;
//     const startY = event.clientY - position.y;

//     const handleMouseMove = (event) => {
//         const newX = event.clientX - startX;
//         const newY = event.clientY - startY;
//         setPosition({ x: newX, y: newY });
//     };

//     const handleMouseUp = () => {
//         document.removeEventListener('mousemove', handleMouseMove);
//         document.removeEventListener('mouseup', handleMouseUp);
//     };

//     document.addEventListener('mousemove', handleMouseMove);
//     document.addEventListener('mouseup', handleMouseUp);
// };
// // Resize
// const handleResize = (event, corner) => {
//     event.preventDefault();

//     const startX = event.clientX;
//     const startY = event.clientY;
//     const initialSize = { ...size };

//     const handleMouseMove = (event) => {
//         const offsetX = event.clientX - startX;
//         const offsetY = event.clientY - startY;

//         let newWidth = initialSize.width;
//         let newHeight = initialSize.height;

//         if (corner === 'top-left') {
//             newWidth = initialSize.width - offsetX;
//             newHeight = initialSize.height - offsetY;
//         } else if (corner === 'top-right') {
//             newWidth = initialSize.width + offsetX;
//             newHeight = initialSize.height - offsetY;
//         } else if (corner === 'bottom-left') {
//             newWidth = initialSize.width - offsetX;
//             newHeight = initialSize.height + offsetY;
//         } else if (corner === 'bottom-right') {
//             newWidth = initialSize.width + offsetX;
//             newHeight = initialSize.height + offsetY;
//         }

//         // Ensure the new width and height are positive values
//         newWidth = Math.max(newWidth, 0);
//         newHeight = Math.max(newHeight, 0);

//         setSize({ width: newWidth, height: newHeight });
//     };

//     const handleMouseUp = () => {
//         document.removeEventListener('mousemove', handleMouseMove);
//         document.removeEventListener('mouseup', handleMouseUp);
//     };

//     document.addEventListener('mousemove', handleMouseMove);
//     document.addEventListener('mouseup', handleMouseUp);
// };
// // upload video
// const handleSubmit = async (e) => {
//     e.preventDefault();
//     try {
//         const formData = new FormData();
//         formData.append('video', file);
//         formData.append('x', position.x);
//         formData.append('y', position.y);
//         formData.append('width', size.width);
//         formData.append('height', size.height);

//         await axios.post(`${url}/project/video/upload`, formData, {
//             headers: {
//                 'Content-Type': 'multipart/form-data',
//             },
//         });
//         toast("Video Uploaded successfully");
//         console.log('Video uploaded successfully!');
//     } catch (error) {
//         console.error('Error uploading video:', error);
//         setSuccess('');
//     }
// };
// const handleDelete = (videoId) => {
//     axios.delete(`${url}/project/video/delete/${videoId}`)
//         .then((response) => {
//             // Handle successful deletion
//             console.log('Video deleted successfully:', response.data);
//             fetchVideos();
//         })
//         .catch((error) => {
//             // Handle error
//             console.error('Error deleting video:', error);
//         });
// };


// useEffect(() => {
//     const canvas = canvasRef.current;
//     const ctx = canvas.getContext('2d');
//     const video = videoRef.current;

//     if (file) {
//         video.src = URL.createObjectURL(file);
//     }

//     video?.addEventListener('loadedmetadata', function () {
//         canvas.width = video.videoWidth;
//         canvas.height = video.videoHeight;
//     });

//     video?.addEventListener('play', function () {
//         const $this = this; // cache
//         (function loop() {
//             if (!$this.paused && !$this.ended) {
//                 ctx.drawImage($this, 0, 0, canvas.width, canvas.height);
//                 setTimeout(loop, 1000 / 30); // drawing at 30fps
//             }
//         })();
//     }, 0);
// }, [file]);
